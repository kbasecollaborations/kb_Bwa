# -*- coding: utf-8 -*-
#BEGIN_HEADER
import logging
import os
from pprint import pprint
from kb_Bwa.util.BwaIndexBuilder import BwaIndexBuilder
from kb_Bwa.util.BwaAligner import BwaAligner
from kb_Bwa.util.BwaRunner import BwaRunner

from installed_clients.KBaseReportClient import KBaseReport
#END_HEADER


class kb_Bwa:
    '''
    Module Name:
    kb_Bwa

    Module Description:
    A KBase module: kb_Bwa
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "https://github.com/man4ish/kb_Bwa.git"
    GIT_COMMIT_HASH = "e611a3e6462c0a9b852bd71e8daeeb0e044ebc57"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.callback_url = os.environ['SDK_CALLBACK_URL']
        self.shared_folder = config['scratch']
        logging.basicConfig(format='%(created)s %(levelname)s: %(message)s',
                            level=logging.INFO)
        #END_CONSTRUCTOR
        pass


    def get_bwa_index(self, ctx, params):
        """
        :param params: instance of type "GetBwaIndex" -> structure: parameter
           "ref" of String, parameter "output_dir" of String, parameter
           "ws_for_cache" of String
        :returns: instance of type "GetBwaIndexResult" -> structure:
           parameter "output_dir" of String, parameter "from_cache" of type
           "boolean" (This example function accepts any number of parameters
           and returns results in a KBaseReport), parameter "pushed_to_cache"
           of type "boolean" (This example function accepts any number of
           parameters and returns results in a KBaseReport)
        """
        # ctx is the context object
        # return variables are: result
        #BEGIN get_bwa_index

        exit(params)
        # At some point might do deeper type checking...
        print('Running get_bwa_index() with params=')

        bwaIndexBuilder = BwaIndexBuilder(self.scratch_dir, self.workspace_url,
                                                  self.callback_url, self.srv_wiz_url,
                                                  ctx.provenance())
        result = bwaIndexBuilder.get_index(params)
        # END get_bowtie2_index

        # At some point might do deeper type checking...
        result = {}
        if not isinstance(result, dict):
            raise ValueError('Method get_bowtie2_index return value ' +
                             'result is not type dict as required.')
        # return the results
        return [result]

    def run_kb_Bwa(self, ctx, params):
        """
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "ReportResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN run_kb_Bwa
        report = KBaseReport(self.callback_url)
        report_info = report.create({'report': {'objects_created':[],
                                                'text_message': params['parameter_1']},
                                                'workspace_name': params['workspace_name']})
        output = {
            'report_name': report_info['name'],
            'report_ref': report_info['ref'],
        }
        #END run_kb_Bwa

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method run_kb_Bwa return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
